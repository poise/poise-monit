#
# Copyright 2015, Noah Kantrowitz
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

require 'spec_helper'

describe PoiseMonit::Resources::Monit do
  step_into(:monit)
  let(:monit_version) { '5.15' }
  let(:monit_version_cmd) { double('monit_version_cmd', error?: false, stdout: "This is Monit version #{monit_version}\nCopyright (C) 2001-2013 Tildeslash Ltd. All Rights Reserved.\n") }
  before do
    # Force the default log level because it alters the tests.
    chefspec_options.delete(:log_level)
    allow_any_instance_of(described_class::Resource).to receive(:shell_out).and_call_original
    allow_any_instance_of(described_class::Resource).to receive(:shell_out).with(%w{/bin/monit -V}).and_return(monit_version_cmd)
  end
  def service_resource(name)
    chef_run.monit(name).provider_for_action(:enable).send(:service_resource)
  end

  context 'action :enable' do
    recipe do
      monit 'monit'
    end

    it { is_expected.to render_file('/etc/monit/monitrc').with_content(<<-EOH) }
# Generated by Chef for monit[monit]


SET PIDFILE /var/run/monit_real.pid

SET LOGFILE /var/log/monit.log

SET IDFILE /var/lib/monit/id
SET STATEFILE /var/lib/monit/state
SET EVENTQUEUE BASEDIR /var/lib/monit/events SLOTS 100

SET HTTPD UNIXSOCKET /var/run/monit.sock
  ALLOW 0.0.0.0/0

INCLUDE /etc/monit/conf.d/*
EOH
    it { is_expected.to create_directory('/etc/monit') }
    it { is_expected.to create_directory('/etc/monit/conf.d') }
    it { is_expected.to create_directory('/var/lib/monit') }
    it { is_expected.to create_directory('/var/lib/monit/events') }
    it { expect(service_resource('monit').command).to eq '/bin/monit -c /etc/monit/monitrc -I -d 120' }

    context 'with a different name' do
      recipe do
        monit 'other'
      end

      it { is_expected.to render_file('/etc/monit-other/monitrc').with_content(<<-EOH) }
# Generated by Chef for monit[other]


SET PIDFILE /var/run/monit-other_real.pid

SET LOGFILE /var/log/monit-other.log

SET IDFILE /var/lib/monit-other/id
SET STATEFILE /var/lib/monit-other/state
SET EVENTQUEUE BASEDIR /var/lib/monit-other/events SLOTS 100

SET HTTPD UNIXSOCKET /var/run/monit-other.sock
  ALLOW 0.0.0.0/0

INCLUDE /etc/monit-other/conf.d/*
EOH
      it { is_expected.to create_directory('/etc/monit-other') }
      it { is_expected.to create_directory('/etc/monit-other/conf.d') }
      it { is_expected.to create_directory('/var/lib/monit-other') }
      it { is_expected.to create_directory('/var/lib/monit-other/events') }
      it { expect(service_resource('other').command).to eq '/bin/monit -c /etc/monit-other/monitrc -I -d 120' }
    end # /context with a different name

    context 'with daemon_delay 0' do
      recipe do
        monit 'monit' do
          daemon_delay 0
        end
      end

      it { is_expected.to render_file('/etc/monit/monitrc').with_content(<<-EOH) }
# Generated by Chef for monit[monit]

SET DAEMON 120

SET PIDFILE /var/run/monit_real.pid

SET LOGFILE /var/log/monit.log

SET IDFILE /var/lib/monit/id
SET STATEFILE /var/lib/monit/state
SET EVENTQUEUE BASEDIR /var/lib/monit/events SLOTS 100

SET HTTPD UNIXSOCKET /var/run/monit.sock
  ALLOW 0.0.0.0/0

INCLUDE /etc/monit/conf.d/*
EOH
      it { expect(service_resource('monit').command).to eq '/bin/monit -c /etc/monit/monitrc -I' }
    end # /context with daemon_delay 0

    context 'with daemon_delay 5' do
      recipe do
        monit 'monit' do
          daemon_delay 5
        end
      end

      it { is_expected.to render_file('/etc/monit/monitrc').with_content(<<-EOH) }
# Generated by Chef for monit[monit]

SET DAEMON 120
  WITH START DELAY 5

SET PIDFILE /var/run/monit_real.pid

SET LOGFILE /var/log/monit.log

SET IDFILE /var/lib/monit/id
SET STATEFILE /var/lib/monit/state
SET EVENTQUEUE BASEDIR /var/lib/monit/events SLOTS 100

SET HTTPD UNIXSOCKET /var/run/monit.sock
  ALLOW 0.0.0.0/0

INCLUDE /etc/monit/conf.d/*
EOH
      it { expect(service_resource('monit').command).to eq '/bin/monit -c /etc/monit/monitrc -I' }
    end # /context with daemon_delay 5

    context 'with 0 events slots' do
      recipe do
        monit 'monit' do
          event_slots 0
        end
      end

      it { is_expected.to render_file('/etc/monit/monitrc').with_content("SET STATEFILE /var/lib/monit/state\n\n") }
    end # /context with 0 events slots

    context 'with -1 events slots' do
      recipe do
        monit 'monit' do
          event_slots(-1)
        end
      end

      it { is_expected.to render_file('/etc/monit/monitrc').with_content("SET EVENTQUEUE BASEDIR /var/lib/monit/events\n") }
    end # /context with -1 events slots

    context 'with daemon_verbose' do
      recipe do
        monit 'monit' do
          daemon_verbose true
        end
      end

      it { expect(service_resource('monit').command).to eq '/bin/monit -c /etc/monit/monitrc -I -d 120 -v' }
    end # /context with daemon_verbose

    context 'with log_level debug' do
      before do
        chefspec_options[:log_level] = :debug
        # Don't actually show debug or info logs.
        allow(Chef::Log).to receive(:info)
        allow(Chef::Log).to receive(:debug)
      end

      it { expect(service_resource('monit').command).to eq '/bin/monit -c /etc/monit/monitrc -I -d 120 -v' }
    end # /context with log_level debug
  end # /context action :enable
end
